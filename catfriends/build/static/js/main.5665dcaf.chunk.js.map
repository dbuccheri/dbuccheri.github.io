{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","cats","map","cat","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","figlio","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredCats","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCJSC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACxB,OAEC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,MAAMC,IAAG,+BAA0BH,EAAMF,EAAhC,4BAClB,gCAAMC,EAAN,KACA,+BAAKC,EAAL,OC8BYI,EA/BE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAGnB,OAEI,6BAIIA,EAAKC,KACV,SAACC,EAAIC,GAEL,OACE,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIS,EAAIT,GACRC,KAAMQ,EAAIR,KACVC,MAAOO,EAAIP,aCLDU,EAjBG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAEhC,OACC,yBAAKX,UAAU,OACd,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,YACZC,SAAUH,MCAEI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,UACnEJ,EAAOK,WC8CIC,E,YA3Cd,aAAe,IAAD,8BACb,+CAODC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAPzC,EAAKC,MAAQ,CACZxB,KAAM,GACNM,YAAa,IAJD,E,iFAYM,IAAD,OAClBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACrB,KAAM6B,S,+BAI3B,IAAD,OACFC,EAAeC,KAAKP,MAAMxB,KAAKgC,QAAQ,SAAAhC,GAC7C,OAAOA,EAAKN,KAAKuC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAI/D,OAA+B,IAA3BF,KAAKP,MAAMxB,KAAKmC,OACZ,0CAGN,yBAAKvC,UAAU,MACd,wBAAIA,UAAU,oBAAd,eACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,KAAO8B,U,GAlCJM,a,MCEnBC,IAASC,OACL,kBAAC,EAAD,MACEC,SAASC,eAAe,SNsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.5665dcaf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({id, name, email}) => {\n\treturn (\n\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-2' >\n\t\t\t<img alt='Cat' src={`https://robohash.org/${email+id}?set=set4&size=150x150`} />\n\t\t\t<h2> {name} </h2>\n\t\t\t<p> {email} </p>\n\t\t</div>\n\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\n\n\n\nconst CardList = ({cats}) => {\n\n\nreturn (\n\n\t\t\t\t<div>\n\t\t\t\t\t {\n\n\t\t\t\t\t \t\n\t\t\t\t\t \t\tcats.map(\n\t\t\t(cat,i) => {\n\n\t\t\treturn(\n\t\t\t\t\t<Card \n\t\t\t\t\tkey={i} \n\t\t\t\t\tid={cat.id} \n\t\t\t\t\tname={cat.name} \n\t\t\t\t\temail={cat.email}\n\t\t\t\t\t />\n\t\t\t);\n\n\t\t\t\t}\n\t\t)\t\t }\n\t\t\t\t</div>\t\n\n\t);\n\n\n}\n\n\nexport default CardList;\n\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='Seach cat'\n\t\t\tonChange={searchChange}\n\t\t\t />\n\t\t\t\n\t\t</div>\n\t);\n\n\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (figlio) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border:'1px solid black', height: '500px'}}>\n\t\t\t{figlio.children}\n\t\t</div>\n\t\t);\n}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from './CardList.js';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\n\n\n\nclass  App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tcats: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\t\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value})\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({cats: users})\n\t\t)\n\t}\n\n\trender() {\n\t\tconst filteredCats = this.state.cats.filter( cats =>{\n\t\treturn cats.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\t\t}\n\t\t)\n\n\t\tif (this.state.cats.length === 0) {\n\t\t\treturn <h1>Loading...</h1>\n\t\t} else {\n\t\treturn (\n\t\t\t\t<div className='tc' >\n\t\t\t\t\t<h1 className='styles coloring '>Cat Friends</h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList cats= {filteredCats} />\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App.js';\nimport 'tachyons';\n\n\nReactDOM.render(\n\t\t\t\t<App />\n\t\t\t\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}